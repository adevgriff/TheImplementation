3/25/23

****************************************ALL ABOUT REGISTERS**************************************************************************************8

First the nessacary implementation details for the registers of the xtensa processor

32 big register file this should through the windowed register scheme hold 32 or 64 general purpose registers
    -best to implement as an array of 32 bit unsigned integers probably coupled with the functions that access integers

-32 bit program counter that only stores the lower oder 30 bits that are stored in it leaving the other two alone
    -this means that subroutines called using register window instructions must be placed in the same 1Gb address

-Tons of special registers would like more details on this one to be continued

-16 one bit boolean registers will just implement as booleans unless seems more effiecent to store as bits may be worth
    looking into and learning from

-16 optional 32 bit floating point registers would definately need to look at details on this to determine the exact details of the floating point scheme
    that is used would probably like to have c-ustom function to convert the bits into the floating point number in whatever C is using and back as part of the function
    that comes after these

- four optional 32bit MAC16 data registers these can hole 2 16 bit operands and a 32 bit result

- optional vectra LXDSP register files do not know all the details of these yet but should work the same as with the general purpose register file but does not have access to
    the windowing capabilities


-----------------------------------------The Size 32 General Purpose Register File-----------------------------------------------------

-made of a collection of flip flops probably don't have to go this far down the rabbit hole on these for this project takes in addresses of registers and a location to store responce
    and address to get data

-32 or 64 reisters in size instructions have access to these registers through a sliding window of 16 registers

-uses a 4 bit encoding for source and destination registers

-When window overflows triggers a window overflow exception that spills contents of the old window to a pre allocated stack.

-When rotating back to spilled window, underflow exception occurs thats handeler stores spilled contents back into register file
    -some of this may require thinking about how the precessor does handel exceptions to fully implement this correctly but it definately
     need to be implemented this project otherwise programs would definately be capable of executing different from original hardware.


-window uses instructions to rotate the register file by 4, 8, or 12 registers allawys must have at least a 4 bits (16 - <number of registers moved>) of overlap with old position of
    the window to pass data into the new window

More than one reigister window causing overflow underflow restoring?

-------------------------------------------Special Register ------------------------------------------------------------------------------

-Instructions that read and write registers are seperate from ones that operate on special registers these functions include
    -XSR
    -WSR
    -RSR
    -RUR
    -WUR

-each special register has a number some overlap in number with others but since they are accessed by different functions this is not a concern

-The table of the special register numbers I will include in this file 

-----------------------------------------Opcode decoding-----------------------------------------------------------------------------
AR is address register BR is "base or branch register?"
op0 - major Opcode
op1 - 4bit subopcode for 24 bit instructions
op2 - 4bit subopcode for 24 bit instructions
r- AR taret result, BR target result, 4 bit immediate, 4 bit subopcode
s - AR source, BR source, AR target
t - AR target, BR target, AR source, BR source, 4 bit subopcode
n- register window invrement, 2 bit subopcode, n||2'b00 is used as a AR target on CALLn/CALLXn
m- 2 bit subopcode
i- 1 bit subopcode
z- 1 bit subopcode
imm4- 4 bit immediate
imm6- 6 bit immediate
....continutes for 7,8,12,16
offset - 18 bit PC-relitive offset
ai4const - 4bit immediate, if 0 interpreted as a -1 otherwise sign extended
b4const - 4 bit encoded constant value
bbi - 5 bit selector for booleans in register
sa- 4 or 5 bit shift MAC16_REGISTER_AMOUNT
sr- 8 bit special register selector
x - 1 bit MAC16 data reg selector only to be used for M0 or M1
y - 1 bit MAC 16 data register selector to be used for only M2 and M3
w-2 bit MAC 16 data register selector that can be used for all the registers

-----------------------------------Core Processor config parameters---------------------------------------------------------------------------------------------
msbFirst Byte Order either a 0 meaning little endian or 1 meaning Big endian

-----------------------------------Memory addressing------------------------------------------------------------------------------------------------------------
pin style memory access for library user probably the best optional

32 bit memory addressing

load and store instruction can access the whole 32 bit memory space

PC can access instruction throughtout the whole 32 bit memory space

Register window call and return cannot access entire memory space
    cannot cross 1 G bit boundries because they only store the lower
    lower 30 bits and they leave the higher 2 bits of PC unchanged

Configured to use either big or little endian

addresses memory as bytes(8-bits)
    halfwords(16 bits)
    words(32 - bits)
    possible designer defined 64 and 128 bits

memeory references must be aligned using an alignment equal to the size of the data

/****************************Load and store instruction details*********************************************************/
load instructions form an address by adding a base register and an 8 bit unsigned offset.

this address is tehn used to access the memory system which can be through cache(will need to see the kind of cache to implement)

the memory system returns a data item which can be 32 64 or 128 bits depending on the configuration

the load instructions then extract the referenced data from that memroy item and either zero-extend or sign-extend the result to be written to a register

unless unaligned exception option is enabled the processor does not handle misaligned data or trap when misaligned address is used instead it just loads the aligned data item at the computed address
    allowing funnel shifter to be used with pair of loads to reference data on any byte address

    funnel shifter details here - 

ONLY instructions L32I and L32I.N and L32R may access instruction RAM and ROM locations

store instructions access address information similarly to load instructions

store memory erros are not synchronous exceptions expect that the memory system will use an interrupt to indeicate a store error

ONLY instructions s32I and s32I.N may access instruction Ram and instruction ROM

/******************************Jump and Call Instructions*************************************************************************************************/

PC-relative jump and call instructions have a longer range then conditional branches(specifically J)
jump and call indirect instructions provide support for case dispatch function variables and dynamic linking

/******************************Conditional Branch Instruction Detials****************************************************************************************************************************/
Compound compare and branch instructions improve code density and performance compared to other ISAs

All branches are PC-relative 

the immediate field contains the difference between the target PC plus 4 and the current PC
the use of a PC-relative offset of -3 to 0 is illegal and reserved for future use

/**************************Move instruction details***************************************************************************************************************************************/
MOVI sets a reigster to a constant encoded in the instruction the conditional move instructions are used for branch avoidance

/************************Arithmetic Instruction details*************************************************************/
ones with small shift are for address calculations and synthesizing constant multiples
ADDMI instruction is used to extend the range of load and store instructions

/*************************Bitwise Logical Instruction Details*****************************/
EXTUI can perform many of the most commonly used bitwise AND operations
no immediate forms because it would be limited to 4 bits due to Xtensa LX core's compact 24/16 bit instruction words

/**************************Shift Instruction Details*********************************/
no single instruction shifts where the shift amount is a register operands
    this is because taking amounts from a general register can create critical timing paths that may limity processors max clock frequency
Funnel shifts(where two data values are catenated on input to the shifter) solve this problem but require too many operands

To fix shifting issues Xtensa LX architectre provides a funnel shift where shift amount is taken from SAR register
    variable shifts are synthesized by compiler using an instruction to compute SAR from the shift amout in general register followed by a funnel shift

to facilitate unsigned bit-field extraction the EXTUI instructions take a 4 bit mask field that specifies the number of mask bits to use on the shift result
    the 4 bit field spcifies masks of 1 to 16 ones

SRLI instruction provides shifting without a mask

the legal range of values for the SAR is 0 to 32 not 0 to 31 the use of SRC, SRA, SLL, or SRL when SAR > 32 is undefined

contents of SAR are undefined after the processor reset adn should be initialized by the reset exception-vector code

/***************************Special Register Details******************************************/
SAR register is part of the non privileged special register set in the Xtensa ISA

contents of the special register in the core architecture can be read and written to and from the AR registers
with the Read Special Register(RSR.SAR), similar for write and exchange with WSR and XSR instructions

SAR is special register number 3

/*************************Xtensa Application Binary Interface(ABI)***************************************/
ABI specifies the software conventions required for Xtensa code to interperate

    - Data types and alignment for standard C and C++ data types  noted in Xtensa_lx Overview handbook page 69
    -Stack Fram Layout
        -grows down from high to low addresses
        -SP must always be aligned to 16 byte boundry
        -Each stack frame contians at least 16 bytes of register window save area
        -if a function call has arguments that do not fit in registers they are passed on the stack beginning at the
            stack pointer address
        - frame pointer register is only required when storage is dynamically allocated on the stack
            for example with alloca instruction or for variable sized local arrays
        -when a frame pointer is used it is set to the value of the stack pointer before any stack space is dynamically allocated
    -Calling conventions
        -register windows for the caller and the callee are not the same but they partially overlap
        -as many as six words of arguments can be passed from the caller to the callee in these overlapping registers
        -as many as four words of a return value can be returned in the same registers
        -what does not fit to pass in registers is passed on the stack same for what needs to be returned
        -register a0 is return address, a1 is stack pointer, a2-a7 are incomming arguments, a7 is an optional frame pointer

/****************************Exception-Processing States and Options************************************/
baseline processor configuration only supports synchronous exceptions like those caused by illegal instructions, system calls and instruction-fetch errors and load/store errors

only one exception model Xtensa Exception Architecture 2(XEA2) supported

two exception vectors both configuration options UserExceptionVector and KernelExceptionVector

-saves the address of the instruction causing the exception into special register EPC[1]
-cause code for the exception goes into special reigister EXCCAUSE
-Interrupts and exceptions are precise so that on returning from the exception handler program execution can continue exactly where it left offset

lots of exception options unaligned exception, interrupt exception, high priority interrupt exception, timer interrupt exception

/*****************************Memory Management Model Types and Options*****************************************/
core supports one memory management configureation region protection implemented by a block called the region protection unit(RPU)

Region protection

-The RPU divides teh processors memory space into eight memory regions
-seperate protection settings for instruction and data memory accesses
-access modes of each memory region can be changed using appropriate WITLB or WDTLB instruction
-region number RN maps to starting address of region by RN*0x20000000 RN's go from 0-7
-when access mode attribute is set to a reserved or illegal value memory accesses to that region cause an exception as listed in table on page 76 in overview handbook
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

At this point abandoning lx overview handbook as it is mostly focused on programmers programming for the processor and does not go into nessassary details


For sure starting with only the core architecture

The processor state for the core architecture

AR,  qunatity 16, width 32, Address register file, R/w
PC, quantity 1, width 32, Program counter
SAR, quantity 1, width 6, shift amount register, R/W, special register number 3

guessing these are the supported registers for the core architecture

